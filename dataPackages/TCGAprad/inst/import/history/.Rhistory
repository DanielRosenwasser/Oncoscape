x
patient.id <- tcga.ids[1]
tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)
tbl.pt.row
diagnosis.year <- tbl.pt.row$initial_pathologic_dx_year[1]
   
diagnosis.year
 diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
diagnosis.date
reformat(diagnosis.date)
reformatDate(diagnosis.date)
create.Diagnosis.record <- function(patient.id)
{
    tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)
    diagnosis.year <- tbl.pt.row$initial_pathologic_dx_year[1]
    if(diagnosis.year == "[Not Available]"){
        diagnosis.date = NA
    }else{
        diagnosis.date <- reformatDate(as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01")))
    }
    patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
    patient.number <- as.integer(id.map[patient.id])
    
    name <- "Diagnosis"
    
    result <- vector("list", nrow(tbl.pt.row) )
    good.records.found <- 0
    
    disease <- tbl.pt.row$tumor_tissue_site
    tissueSourceSiteCode <- tbl.pt.row$tissue_source_site
    #pathMethod <-tbl.pt.row$method_initial_path_dx
    
    # if(pathMethod == "Cytology (e.g. Peritoneal or pleural fluid)") pathMethod = "Cytology"
    # if(pathMethod == "Fine needle aspiration biopsy") pathMethod = "Aspirate"
    # if(pathMethod == "Core needle biopsy") pathMethod = "Core Biopsy"
    # if(pathMethod == "Other method, specify:") pathMethod = "Other"
    # if(pathMethod == "Unknown") pathMethod = NA
    
    new.event <- list(PatientID=patient.id,
    PtNum=patient.number,
    study=study,
    Name=name,
    Fields = list(date=diagnosis.date, disease=disease, siteCode=tissueSourceSiteCode))
    
    good.records.found <- good.records.found + 1
    result[[good.records.found]] <- new.event
    
    result[1:good.records.found]
    
} # create.Diagnosis.record
#----------
    x <- create.Diagnosis.record(tcga.ids[1])
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]]$Fields), c("date", "disease", "siteCode"))
    checkEquals(x[[1]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Diagnosis", Fields=list(date="01/01/2010", disease="Prostate", siteCode="2A")))
print("--- test_create.Tests.record")
    x <- create.Tests.record(tcga.ids[1]) #nte
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("Date","Type","Test", "Result"))
    checkEquals(length(x),3)
    checkEquals(x[[1]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Tests", Fields=list(Date="08/09/2011",Type="PSA",Test="PSA", Result="0.05")))
    checkEquals(x[[1]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Tests", Fields=list(Date="01/22/2010",Type="bone scan",Test="bone scan", Result="Normal (no evidence of prostate cancer) [cM0]")))
    checkEquals(x[[1]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Tests", Fields=list(Date=NA,Type="CT scan",Test="CT scan", Result=NA)))
 x <- create.Tests.record(tcga.ids[1]) #nte
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("Date","Type","Test", "Result"))
    checkEquals(length(x),3)
    checkEquals(x[[1]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Tests", Fields=list(Date="08/09/2011",Type="PSA",Test="PSA", Result="0.05")))
    checkEquals(x[[2]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Tests", Fields=list(Date="01/22/2010",Type="bone scan",Test="bone scan", Result="Normal (no evidence of prostate cancer) [cM0]")))
    checkEquals(x[[3]], list(PatientID="TCGA.2A.A8VL", PtNum=1, study=study, Name="Tests", Fields=list(Date=NA,Type="CT scan",Test="CT scan", Result=NA)))
source("createEventList.R")
source("createEventList.R")
source("createEventList.R")
source("createEventList.R")
runTests <- function()
{
    test_create.DOB.record()
    test_create.Chemo.record()
    test_create.Diagnosis.record()#
    test_create.status.record()
    test_create.Progression.record()
    test_create.Radiation.record()
    test_create.Procedure.record()
    test_create.Encounter.record()
    test_create.Pathology.record()
    test_create.Absent.record()
    test_create.Background.record()
    test_create.Tests.record()#
    
} # runTe
runTests()
dob.events <- lapply(patient.ids, function(id) create.DOB.record(id))
    diagnosis.events <- create.all.Diagnosis.records(patient.ids)
    chemo.events <- create.all.Chemo.records(patient.ids)#
    radiation.events <- create.all.Radiation.records(patient.ids)
    
    encounter.events <- create.all.Encounter.records(patient.ids)
    pathology.events <- create.all.Pathology.records(patient.ids)
    progression.events <- create.all.Progression.records(patient.ids)
    
    status.events <- lapply(patient.ids, create.status.record)
    procedure.events <- create.all.Procedure.records(patient.ids)
    absent.events <- create.all.Absent.records (patient.ids)
    background.events <- lapply(patient.ids, create.Background.record)
    Tests.events <- create.all.Tests.records(patient.ids)
 tbl.nteSub <- subset(tbl.nte, bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO" | new_tumor_event_radiation_tx == "NO"))
    tbl.f1Sub  <- subset(tbl.f1,  bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO"))
    tbl.omfSub <- subset(tbl.omf, bcr_patient_barcode %in% patient.ids & days_to_other_malignancy_dx != "[Not Available]" & (drug_tx_indicator == "NO" | radiation_tx_indicator == "NO"))
    tbl.ptSub <- subset(tbl.pt, bcr_patient_barcode==patient.id)
    
 ids <- unique(c(tbl.nteSub$bcr_patient_barcode, tbl.ptSub$bcr_patient_barcode, tbl.omfSub$bcr_patient_barcode))
   
 count <- 1
    result <- vector("list", length(ids))
    for(id in ids){
        #printf("id: %s", id)
        new.list <- create.Absent.record(id)
        range <- count:(count+length(new.list)-1)
        result[range] <- new.list
        count <- count + length(new.list)
    } # for id
    
id
match(id,ids)
length(ids)
patient.id<-ids[25]
patient.id
 tbl.nteSub <- subset(tbl.nte, bcr_patient_barcode==patient.id & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO" | new_tumor_event_radiation_tx == "NO"))
    tbl.f1Sub  <- subset(tbl.f1,  bcr_patient_barcode==patient.id & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO"))
    tbl.omfSub <- subset(tbl.omf, bcr_patient_barcode==patient.id & days_to_other_malignancy_dx != "[Not Available]" & (drug_tx_indicator == "NO" | radiation_tx_indicator == "NO"))
    tbl.ptSub <- subset(tbl.pt, bcr_patient_barcode==patient.id)
    
 if(nrow(tbl.nteSub) == 0 && nrow(tbl.omfSub) == 0 && nrow(tbl.f1Sub) == 0)
    return(list())
    diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]
    if(diagnosis.year == "[Not Available]"){
        diagnosis.date = NA
    }else{
        diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
    }
    
nrow(tbl.nteSub) == 0 && nrow(tbl.omfSub) == 0 && nrow(tbl.f1Sub) == 0
tbl.nteSub
tbl.f1Sub
tbl.omfSub
tbl.nteSub <- subset(tbl.nte, bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO" | new_tumor_event_radiation_tx == "NO"))
    tbl.f1Sub  <- subset(tbl.f1,  bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO"))
    tbl.omfSub <- subset(tbl.omf, bcr_patient_barcode %in% patient.ids & days_to_other_malignancy_dx != "[Not Available]" & (drug_tx_indicator == "NO" | radiation_tx_indicator == "NO"))
    tbl.ptSub <- subset(tbl.pt, bcr_patient_barcode==patient.id)
    
    
    ids <- unique(c(tbl.nteSub$bcr_patient_barcode, tbl.f1Sub$bcr_patient_barcode, tbl.omfSub$bcr_patient_barcode))
    
    count <- 1
    result <- vector("list", length(ids))
    for(id in ids){
        #printf("id: %s", id)
        new.list <- create.Absent.record(id)
        range <- count:(count+length(new.list)-1)
        result[range] <- new.list
        count <- count + length(new.list)
    } # for id
deleters <- which(unlist(lapply(result, is.null)))
deleters
 dob.events <- lapply(patient.ids, function(id) create.DOB.record(id))
    diagnosis.events <- create.all.Diagnosis.records(patient.ids)
    chemo.events <- create.all.Chemo.records(patient.ids)#
    radiation.events <- create.all.Radiation.records(patient.ids)
    
    encounter.events <- create.all.Encounter.records(patient.ids)
    pathology.events <- create.all.Pathology.records(patient.ids)
    progression.events <- create.all.Progression.records(patient.ids)
    
    status.events <- lapply(patient.ids, create.status.record)
    procedure.events <- create.all.Procedure.records(patient.ids)
    absent.events <- create.all.Absent.records (patient.ids)
    background.events <- lapply(patient.ids, create.Background.record)
    Tests.events <- create.all.Tests.records(patient.ids)
    # prad surgery at time of Dx & not reported, but other post/pre surgeries in other tables
    
    events <- append(dob.events, chemo.events)
    events <- append(events, diagnosis.events)
    events <- append(events, status.events)
    events <- append(events, progression.events)
    events <- ap    evvents, radiation.events)
    events <- append(events, proced    events)
    events <- append(events, encounter.events)
    events <- append(events, pathology.events)
    
    events <- append(events, absent.events)
    events <- append(events, background.events)
    events <- append(events, Tests.events)
    
    #    pr    #"found %d events for %d patients", length(events), length(patient.ids))
    print(table(unlist(lapply(events, function(e) e["Name"]))))
    
    events
dob.events <- lapply(patient.ids, function(id) create.DOB.record(id))
    diagnosis.events <- create.all.Diagnosis.records(patient.ids)
    chemo.events <- create.all.Chemo.records(patient.ids)#
    radiation.events <- create.all.Radiation.records(patient.ids)
    
    encounter.events <- create.all.Encounter.records(patient.ids)
    pathology.events <- create.all.Pathology.records(patient.ids)
    progression.events <- create.all.Progression.records(patient.ids)
    
    status.events <- lapply(patient.ids, create.status.record)
    procedure.events <- create.all.Procedure.records(patient.ids)
    absent.events <- create.all.Absent.records (patient.ids)
    background.events <- lapply(patient.ids, create.Background.record)
    Tests.events <- create.all.Tests.records(patient.ids)
create.all.Absent.records <- function(patient.ids)
{
    tbl.nteSub <- subset(tbl.nte, bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO" | new_tumor_event_radiation_tx == "NO"))
    tbl.f1Sub  <- subset(tbl.f1,  bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & (new_tumor_event_pharmaceutical_tx == "NO"))
    tbl.omfSub <- subset(tbl.omf, bcr_patient_barcode %in% patient.ids & days_to_other_malignancy_dx != "[Not Available]" & (drug_tx_indicator == "NO" | radiation_tx_indicator == "NO"))
    tbl.ptSub <- subset(tbl.pt, bcr_patient_barcode==patient.id)
    
    
    ids <- unique(c(tbl.nteSub$bcr_patient_barcode, tbl.f1Sub$bcr_patient_barcode, tbl.omfSub$bcr_patient_barcode))
    
    count <- 1
    result <- vector("list", length(ids))
    for(id in ids){
        #printf("id: %s", id)
        new.list <- create.Absent.record(id)
        range <- count:(count+length(new.list)-1)
        result[range] <- new.list
        count <- count + length(new.list)
    } # for id
    
    deleters <- which(unlist(lapply(result, is.null)))
    if(length(deleters) > 0)
    result <- result[-deleters]
    
    result
    
} # create.all.Pathology.records
#--------------------------------------------------------------
dob.events <- lapply(patient.ids, function(id) create.DOB.record(id))
    diagnosis.events <- create.all.Diagnosis.records(patient.ids)
    chemo.events <- create.all.Chemo.records(patient.ids)#
    radiation.events <- create.all.Radiation.records(patient.ids)
    
    encounter.events <- create.all.Encounter.records(patient.ids)
    pathology.events <- create.all.Pathology.records(patient.ids)
    progression.events <- create.all.Progression.records(patient.ids)
    
    status.events <- lapply(patient.ids, create.status.record)
    procedure.events <- create.all.Procedure.records(patient.ids)
    absent.events <- create.all.Absent.records (patient.ids)
    background.events <- lapply(patient.ids, create.Background.record)
    Tests.events <- create.all.Tests.records(patient.ids)
    # prad surgery at time of Dx & not reported, but other post/pre surgeries in other tables
    
warnings
warnings()
options(warn=2)
tbl.good <- subset(tbl.f1, bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]" & new_tumor_event_dx_days_to != "[Not Applicable]"  )
    tbl.nteSub <- subset(tbl.nte, bcr_patient_barcode %in% patient.ids & new_tumor_event_dx_days_to != "[Not Available]")
    #ids <- unique(c(tbl.good$bcr_patient_barcode, tbl.nteSub$bcr_patient_barcode))
    ids <- unique(c(tbl.good$bcr_patient_barcode, tbl.nteSub$bcr_patient_barcode))
    
    count <- 1
    #result <- vector("list", nrow(tbl.good))
    result <- vector("list", nrow(tbl.nteSub))
    for(id in ids){
        new.list <- create.Progression.record(id)
        range <- count:(count+length(new.list)-1)
        result[range] <- new.list
        count <- count + length(new.list)
    } # for id
    
    # Count tells us how many good events we found
    deleters <- which(unlist(lapply(result, is.null)))
id
match(id,ids)
patient.id <- id
diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]
    if(diagnosis.year == "[Not Available]"){
        diagnosis.date = NA
    }else{
        diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
    }
    tbl.nte.rows <- subset(tbl.nte, bcr_patient_barcode==patient.id)
    tbl.fu.rows  <- subset(tbl.f1,bcr_patient_barcode==patient.id)
    if(nrow(tbl.fu.rows) == 0 & nrow(tbl.nte.rows)==0 )
    #if(nrow(tbl.nte.rows)==0 )
    return(list())
    
    tbl.fu.rows <- tbl.fu.rows[, c("new_tumor_event_type","new_tumor_event_dx_days_to")  ]
    if(nrow(tbl.nte.rows)>0) {
        nte <- tbl.nte.rows[,c("new_tumor_event_type","new_tumor_event_dx_days_to")]
        tbl.fu.rows <- rbind(tbl.fu.rows, nte)
    }
    tbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to)),]
    duplicates <- which(duplicated(tbl.fu.rows[,"new_tumor_event_dx_days_to"]))
if(length(duplicates)>0){
        dupVals <- unique(tbl.fu.rows[duplicates, "new_tumor_event_dx_days_to"])
        originals <- match(dupVals, tbl.fu.rows$new_tumor_event_dx_days_to)
        allVals <- sapply(dupVals, function(val) {
            t<- paste(tbl.fu.rows[which(tbl.fu.rows$new_tumor_event_dx_days_to == val), "new_tumor_event_type"], collapse=";")
            t<- gsub("\\[Unknown\\]", "", t)
            t<- gsub("\\[Not Available\\]", "", t)
            t<- gsub("NA", "", t)
            while(grepl(";;", t)){ t<- gsub(";;", ";", t)}
            gsub(";$", "", t)
        })
        tbl.fu.rows[originals, "new_tumor_event_type"] <- allVals
        tbl.fu.rows <- tbl.fu.rows[-duplicates,]
    }
    
name <- "Progression"
    result <- vector("list", nrow(tbl.fu.rows) )
    good.records.found <- 0
nrow(tbl.fu.rows)
 if(nrow(tbl.fu.rows)>0){
        for(i in 1:nrow(tbl.fu.rows)){
            row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_tumor_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
            if(row["new_tumor_event_dx_days_to"] != "[Not Available]"){
                progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
            }
        }}
i
 row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_tumor_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
row["new_tumor_event_dx_days_to"]
source("createEventList.R")
source("createEventList.R")
x <- create.Progression.record("TCGA-YL-A8SP")
patient.id<- ids[25[
patient.id <- "TCGA-YL-A8SP"
 
    diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]
    if(diagnosis.year == "[Not Available]"){
        diagnosis.date = NA
    }else{
        diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
    }
    tbl.nte.rows <- subset(tbl.nte, bcr_patient_barcode==patient.id)
    tbl.fu.rows  <- subset(tbl.f1,bcr_patient_barcode==patient.id)
    if(nrow(tbl.fu.rows) == 0 & nrow(tbl.nte.rows)==0 )
    #if(nrow(tbl.nte.rows)==0 )
    return(list())
    
    tbl.fu.rows <- tbl.fu.rows[, c("new_tumor_event_type","new_tumor_event_dx_days_to")  ]
    if(nrow(tbl.nte.rows)>0) {
        nte <- tbl.nte.rows[,c("new_tumor_event_type","new_tumor_event_dx_days_to")]
        tbl.fu.rows <- rbind(tbl.fu.rows, nte)
    }
    tbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to)),]
    duplicates <- which(duplicated(tbl.fu.rows[,"new_tumor_event_dx_days_to"]))
    if(length(duplicates)>0){
        dupVals <- unique(tbl.fu.rows[duplicates, "new_tumor_event_dx_days_to"])
        originals <- match(dupVals, tbl.fu.rows$new_tumor_event_dx_days_to)
        allVals <- sapply(dupVals, function(val) {
            t<- paste(tbl.fu.rows[which(tbl.fu.rows$new_tumor_event_dx_days_to == val), "new_tumor_event_type"], collapse=";")
            t<- gsub("\\[Unknown\\]", "", t)
            t<- gsub("\\[Not Available\\]", "", t)
            t<- gsub("NA", "", t)
            while(grepl(";;", t)){ t<- gsub(";;", ";", t)}
            gsub(";$", "", t)
        })
        tbl.fu.rows[originals, "new_tumor_event_type"] <- allVals
        tbl.fu.rows <- tbl.fu.rows[-duplicates,]
    }
    
    name <- "Progression"
    result <- vector("list", nrow(tbl.fu.rows) )
    good.records.found <- 0
    
    if(nrow(tbl.fu.rows)>0){
        for(i in 1:nrow(tbl.fu.rows)){
            row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_tumor_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
            if(row["new_tumor_event_dx_days_to"] != "[Not Available]" | row["new_tumor_event_dx_days_to"] != "[Not Applicable]"){
                progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
            }
        }}
    
i
row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_tumor_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
            if(row["new_tumor_event_dx_days_to"] != "[Not Available]" | row["new_tumor_event_dx_days_to"] != "[Not Applicable]"){
row["new_tumor_event_dx_days_to"] != "[Not Available]" | row["new_tumor_event_dx_days_to"] != "[Not Applicable]"
 progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
 if(row["new_tumor_event_dx_days_to"] != "[Not Available]" & row["new_tumor_event_dx_days_to"] != "[Not Applicable]"){
                progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
            }
 if(nrow(tbl.fu.rows)>0){
        for(i in 1:nrow(tbl.fu.rows)){
            row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_tumor_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
            if(row["new_tumor_event_dx_days_to"] != "[Not Available]" & row["new_tumor_event_dx_days_to"] != "[Not Applicable]"){
                progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
            }
        }}
source("createEventList.R")
  patients <- tcga.ids
    
    patients <- gsub("\\.", "\\-", patients)
    checkTrue(all(patients %in% tbl.pt[,2]))
    
    history <- parseEvents(patients)
    
    checkEquals(length(history), 5506)
    checkEquals(as.list(table(unlist(lapply(history, function(e) e["Name"])))), list(`Absent`=62, `Background`= 497,`Birth`=497, `Diagnosis`=497,`Drug`=130,`Pathology`=529,`Procedure`=16, `Progression`=96,  `Radiation`=78, `Status`=497, `Tests`=1270))
    #omf: other malignancy form for 2 patients gives extra pathologies
    # many additional surgeries marked (new_tumor_event_additional_surgery_procedure = YES) but no date given
    
    serialized.file.name <- "../../extdata/history.RData"
    #printf("saving Background to %s", serialized.file.name)
    
    save(history, file=serialized.file.name)
length(history)
checkEquals(length(history), 4169)
    checkEquals(as.list(table(unlist(lapply(history, function(e) e["Name"])))), list(`Absent`=62, `Background`= 497,`Birth`=497, `Diagnosis`=497,`Drug`=130,`Pathology`=529,`Procedure`=16, `Progression`=96,  `Radiation`=78, `Status`=497, `Tests`=1270))
    #omf: other malignancy form for 2 patients gives extra pathologies
    # many additional surgeries marked (new_tumor_event_additional_surgery_procedure = YES) but no date given
    
    serialized.file.name <- "../../extdata/history.RData"
    #printf("saving Background to %s", serialized.file.name)
    
    save(history, file=serialized.file.name)
colnames(tbl.nte)[grep("surg",colnames(tbl.nte))]
colnames(tbl.f1)[grep("surg",colnames(tbl.f1)]
colnames(tbl.f1)[grep("surg",colnames(tbl.f1))]
colnames(tbl.omf)[grep("surg",colnames(tbl.omf))]
colnames(tbl.pt)[grep("pro",colnames(tbl.pt))]
colnames(tbl.f1)[grep("pro",colnames(tbl.f1))]
colnames(tbl.f2)[grep("pro",colnames(tbl.f2))]
colnames(tbl.nte)[grep("pro",colnames(tbl.nte))]
colnames(tbl.omf)[grep("pro",colnames(tbl.omf))]
colnames(tbl.omf)[grep("tectomy",colnames(tbl.omf))]
colnames(tbl.omf)[grep("tect",colnames(tbl.omf))]
colnames(tbl.omf)[grep("ect",colnames(tbl.omf))]
colnames(tbl.pt)[grep("ect",colnames(tbl.pt))]
colnames(tbl.f1)[grep("ect",colnames(tbl.f1))]
q()
