x[[1]]
checkEquals(x[[1]], list(PatientID="TCGA.AF.6136", PtNum=13, study=study, Name="Tests",Fields=list(Date=NA, Type=NA,Test="cea", Result="18.3")))
    checkEquals(x[[2]], list(PatientID="TCGA.AF.6136", PtNum=13, study=study, Name="Tests",Fields=list(Date=NA, Type=NA,Test="loci", Result="tested: 5 ; abnormal count: 0")))
    checkEquals(x[[3]], list(PatientID="TCGA.AF.6136", PtNum=13, study=study, Name="Tests",Fields=list(Date=NA, Type="IHC",Test="mismatched protein", Result="tested: YES ; mismatch proteins loss: MLH1 Expressed|MSH2 Expressed|PMS2 Expressed|MSH6 Expressed")))
unique(tbl.pt$loci_tested_count)
unique(tbl.pt$mismatch_rep_proteins_tested_by_ihc)
bl.ptSub <- subset(tbl.pt, bcr_patient_barcode %in% patient.ids & (kras_mutation_found != "[Not Available]" |
    braf_gene_analysis_indicator != "[Not Available]" | cea_level_pretreatment != "[Not Available]"|
    loci_tested_count != "[Not Available]" | mismatch_rep_proteins_tested_by_ihc == "YES"))
    
    ids <- unique(tbl.ptSub$bcr_patient_barcode)
    
    count <- 1
    result <- vector("list", length(ids))
    for(id in ids){
        #printf("id: %s", id)
        new.list <- create.Tests.record(id)
        range <- count:(count+length(new.list)-1)
        result[range] <- new.list
        count <- count + length(new.list)
    } # for id
    
    deleters <- which(unlist(lapply(result, is.null)))
tbl.ptSub <- subset(tbl.pt, bcr_patient_barcode %in% patient.ids & (kras_mutation_found != "[Not Available]" |
    braf_gene_analysis_indicator != "[Not Available]" | cea_level_pretreatment != "[Not Available]"|
    loci_tested_count != "[Not Available]" | mismatch_rep_proteins_tested_by_ihc == "YES"))
    
    ids <- unique(tbl.ptSub$bcr_patient_barcode)
    
    count <- 1
    result <- vector("list", length(ids))
    for(id in ids){
        #printf("id: %s", id)
        new.list <- create.Tests.record(id)
        range <- count:(count+length(new.list)-1)
        result[range] <- new.list
        count <- count + length(new.list)
    } # for id
    
    deleters <- which(unlist(lapply(result, is.null)))
deleters
source("createEventList.R")
test_create.Progression.record()
   test_create.Radiation.record()
   test_create.Procedure.record()
   test_create.Encounter.record()
   test_create.Pathology.record()
   test_create.Absent.record()
   test_create.Tests.record()
   test_create.Background.record()
 patients <- tcga.ids
   
   patients <- gsub("\\.", "\\-", patients)
   checkTrue(all(patients %in% tbl.pt[,1]))
 patients <- tcga.ids
   
   patients <- gsub("\\.", "\\-", patients)
   checkTrue(all(patients %in% tbl.pt[,2]))
print("--- test_create.status.record")
    x <- create.status.record(tcga.ids[1])
    checkTrue(is.list(x))
    checkEquals(names(x), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x$Fields), c("date", "status", "tumorStatus"))
    checkEquals(x, list(PatientID="TCGA.AF.2687", PtNum=1, study=study, Name="Status", Fields=list(date="01/05/2011", status="Alive", tumorStatus="tumor free")))
x <- create.status.record("TCGA-AG-3583")
    checkEquals(x, list(PatientID="TCGA.06.0877", PtNum=28, study=study, Name="Status", Fields=list(date="06/21/2008", status="Dead", tumorStatus="with tumor")))
x <- create.status.record("TCGA-BM-6198")
    checkEquals(x, list(PatientID="TCGA.BM.6198", PtNum=106, study=study, Name="Status", Fields=list(date="11/07/2010", status="Alive", tumorStatus="tumor free")))
x <- create.status.record("TCGA-AG-3583")
x
x <- create.status.record("TCGA-AG-3583")
    checkEquals(x, list(PatientID= "TCGA.AG.3583", PtNum=25, study=study, Name="Status", Fields=list(date="09/02/2009", status="Dead", tumorStatus=NA)))
test_create.status.record <- function()
{
    print("--- test_create.status.record")
    x <- create.status.record(tcga.ids[1])
    checkTrue(is.list(x))
    checkEquals(names(x), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x$Fields), c("date", "status", "tumorStatus"))
    checkEquals(x, list(PatientID="TCGA.AF.2687", PtNum=1, study=study, Name="Status", Fields=list(date="01/05/2011", status="Alive", tumorStatus="tumor free")))
x <- create.status.record("TCGA-AG-3583")
    checkEquals(x, list(PatientID= "TCGA.AG.3583", PtNum=25, study=study, Name="Status", Fields=list(date="09/02/2009", status="Dead", tumorStatus=NA)))
    x <- create.status.record("TCGA-BM-6198")
    checkEquals(x, list(PatientID="TCGA.BM.6198", PtNum=106, study=study, Name="Status", Fields=list(date="11/07/2010", status="Alive", tumorStatus="tumor free")))
} # test_create.status.record
#---------------------------------------------------
test_create.status.record()
x <- create.Encounter.record(tcga.ids[1])
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("type", "kps", "ecog","date","height","weight","BSA","BMI","ZubrodScore"))
    checkEquals(x[[1]], list(PatientID="TCGA.3L.AA1B", PtNum=1, study=study, Name="Encounter", Fields=list(type=NA, kps=NA, ecog=NA,date="01/01/2013", height="173",weight="63.3",BSA=NA, BMI=NA, ZubrodScore=NA)))
    x <- create.Encounter.record("TCGA-AA-3950")
x
x <- create.Encounter.record("TCGA-AA-3950")
x
create.Encounter.record <- function(patient.id)
{
    
    tbl.encSub <- subset(tbl.pt, bcr_patient_barcode==patient.id)
    #tbl.nteSub <- subset(tbl.f1, bcr_patient_barcode==patient.id)
    if(nrow(tbl.encSub) == 0)
    return(list())
    
    patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
    patient.number <- as.integer(id.map[patient.id])
    name <- "Encounter"
    
    result <- vector("list", nrow(tbl.encSub))
    good.records.found <- 0
    
    if(nrow(tbl.encSub)>0){
        for(encEvent in 1:nrow(tbl.encSub)){
            diagnosis.year <- tbl.encSub$initial_pathologic_dx_year[encEvent]
            diagnosis.date <- reformatDate(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
            #encType <- tbl.encSub$performance_status_timing[encEvent]
            #if(encType == "Preoperative") encType = "Pre-Operative"
            #if(encType == "[Not Evaluated]") encType = "absent"
            #if(encType == "[Not Available]" || encType == "Unknown") encType = NA
            
            #KPS    <- tbl.encSub$karnofsky_score[encEvent]
            #ECOG   <- tbl.encSub$ecog_score[encEvent]
            
            #if(KPS == "[Not Evaluated]") KPS = "absent"
            # if(KPS == "[Not Available]" || KPS == "Unknown") KPS = NA
            # if(ECOG == "[Not Evaluated]") ECOG = "absent"
            # if(ECOG == "[Not Available]" || ECOG == "Unknown") ECOG = NA
            
            # if(grepl("^\\d+$",KPS)) KPS = as.integer(KPS)
            #if(grepl("^\\d+$",ECOG)) ECOG = as.integer(ECOG)
            
            height  <- tbl.encSub$height_cm_at_diagnosis[encEvent]
            weight  <- tbl.encSub$weight_kg_at_diagnosis[encEvent]
            
            if(height == "[Not Available]") height = NA
            if(weight == "[Not Available]") weight = NA
            new.event <- list(PatientID=patient.id,
            PtNum=patient.number,
            study=study,
            Name=name,
            Fields = list(type=NA, kps=NA, ecog=NA, date = diagnosis.date,height = height, weight = weight,
            BSA = NA, BMI = NA, ZubrodScore=NA))
            good.records.found <- good.records.found + 1
            result[[good.records.found]] <- new.event
        }
    } # for encEvent
    
    result[1:good.records.found]
    
} # create.Encounter.record
#----------------------------------------------------------------------------
x <- create.Encounter.record(tcga.ids[1])
    checkTrue(is.list(x))
x
 checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("type", "kps", "ecog","date","height","weight","BSA","BMI","ZubrodScore"))
    checkEquals(x[[1]], list(PatientID="TCGA.3L.AA1B", PtNum=1, study=study, Name="Encounter", Fields=list(type=NA, kps=NA, ecog=NA,date="01/01/2013", height="173",weight="63.3",BSA=NA, BMI=NA, ZubrodScore=NA)))
    x
x <- create.Encounter.record("TCGA-AA-3950")
x
x <- create.Encounter.record(tcga.ids[168])
x
x <- create.Encounter.record(tcga.ids[164])
x
 x <- create.Encounter.record("TCGA-F5-6814")
    checkEquals(x[[1]], list(PatientID="TCGA.F5.6814", PtNum=164, study=study, Name="Encounter", Fields=list(type=NA, kps=NA, ecog=NA,date= "01/01/2011", height="175",weight="61",BSA=NA, BMI=NA, ZubrodScore=NA)))
x
test_create.Encounter.record <- function()
{
    print("--- test_create.Encounter.record")
    x <- create.Encounter.record(tcga.ids[1])
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("type", "kps", "ecog","date","height","weight","BSA","BMI","ZubrodScore"))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.2687", PtNum=1, study=study, Name="Encounter", Fields=list(type=NA, kps=NA, ecog=NA,date="01/01/2009", height="163",weight="68.2",BSA=NA, BMI=NA, ZubrodScore=NA)))
    x <- create.Encounter.record("TCGA-F5-6814")
    checkEquals(x[[1]], list(PatientID="TCGA.F5.6814", PtNum=164, study=study, Name="Encounter", Fields=list(type=NA, kps=NA, ecog=NA,date= "01/01/2011", height="175",weight="61",BSA=NA, BMI=NA, ZubrodScore=NA)))
    
} # test_create.Encounter.record
#----------------------
test_create.Encounter.record()
runTests <- function()
{
   test_create.DOB.record()
   test_create.Chemo.record()
   test_create.Diagnosis.record()
   test_create.status.record()
   test_create.Progression.record()
   test_create.Radiation.record()
   test_create.Procedure.record()
   test_create.Encounter.record()
   test_create.Pathology.record()
   test_create.Absent.record()
   test_create.Tests.record()
   test_create.Background.record()
} # runTests
#----------------------------
runTests()
 print("--- test_create.Progression.record")
    x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
x
checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.2689", PtNum=2, study=study, Name="Progression", Fields=list(date="02/09/2012", event=NA, number=1)))
    
x
create.Progression.record <- function(patient.id)
{
    
    diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]
    diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
    tbl.fu.rows <- subset(tbl.f2, bcr_patient_barcode==patient.id)
    tbl.nte.rows <- subset(tbl.nte, bcr_patient_barcode==patient.id)
    
    if(nrow(tbl.fu.rows) == 0 & nrow(tbl.nte.rows)==0 )
    return(list())
    
    tbl.fu.rows <- tbl.fu.rows[, c("new_neoplasm_event_type","new_tumor_event_dx_days_to")  ]
    if(nrow(tbl.nte.rows)>0) {
        nte <- tbl.nte.rows[,c("new_neoplasm_event_type","new_tumor_event_dx_days_to")]
        tbl.fu.rows <- rbind(tbl.fu.rows, nte)
    }
    tbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to,decreasing = FALSE)),]
    duplicates <- which(duplicated(tbl.fu.rows[,"new_tumor_event_dx_days_to"]))
    if(length(duplicates)>0){
        dupVals <- unique(tbl.fu.rows[duplicates, "new_tumor_event_dx_days_to"])
        originals <- match(dupVals, tbl.fu.rows$new_tumor_event_dx_days_to)
        allVals <- sapply(dupVals, function(val) {
            t<- paste(tbl.fu.rows[which(tbl.fu.rows$new_tumor_event_dx_days_to == val), "new_neoplasm_event_type"], collapse=";")
            t<- gsub("\\[Unknown\\]", "", t)
            t<- gsub("\\[Not Available\\]", "", t)
            t<- gsub("NA", "", t)
            while(grepl(";;", t)){ t<- gsub(";;", ";", t)}
            gsub(";$", "", t)
        })
        tbl.fu.rows[originals, "new_neoplasm_event_type"] <- allVals
        tbl.fu.rows <- tbl.fu.rows[-duplicates,]
    }
    
    name <- "Progression"
    result <- vector("list", nrow(tbl.fu.rows) )
    good.records.found <- 0
    
    if(nrow(tbl.fu.rows)>0){
        for(i in 1:nrow(tbl.fu.rows)){
            row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_neoplasm_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
            if(row["new_tumor_event_dx_days_to"] != "[Not Available]"){
                progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
            }
        }
    }
    
    
    result[1:good.records.found]
    
} # create.Progression.record
#-----------------------------------------------------------------------------------------------------------------------------------------------------
x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
x
patient.id <- "TCGA-AF-2689"
 diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]
    diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
    tbl.fu.rows <- subset(tbl.f2, bcr_patient_barcode==patient.id)
    tbl.nte.rows <- subset(tbl.nte, bcr_patient_barcode==patient.id)
if(nrow(tbl.fu.rows) == 0 & nrow(tbl.nte.rows)==0 )
    return(list())
    
    tbl.fu.rows <- tbl.fu.rows[, c("new_neoplasm_event_type","new_tumor_event_dx_days_to")  ]
    if(nrow(tbl.nte.rows)>0) {
        nte <- tbl.nte.rows[,c("new_neoplasm_event_type","new_tumor_event_dx_days_to")]
        tbl.fu.rows <- rbind(tbl.fu.rows, nte)
    }
    tbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to,decreasing = TRUE)),]
    duplicates <- which(duplicated(tbl.fu.rows[,"new_tumor_event_dx_days_to"]))
    if(length(duplicates)>0){
        dupVals <- unique(tbl.fu.rows[duplicates, "new_tumor_event_dx_days_to"])
        originals <- match(dupVals, tbl.fu.rows$new_tumor_event_dx_days_to)
        allVals <- sapply(dupVals, function(val) {
            t<- paste(tbl.fu.rows[which(tbl.fu.rows$new_tumor_event_dx_days_to == val), "new_neoplasm_event_type"], collapse=";")
            t<- gsub("\\[Unknown\\]", "", t)
            t<- gsub("\\[Not Available\\]", "", t)
            t<- gsub("NA", "", t)
            while(grepl(";;", t)){ t<- gsub(";;", ";", t)}
            gsub(";$", "", t)
        })
        tbl.fu.rows[originals, "new_neoplasm_event_type"] <- allVals
        tbl.fu.rows <- tbl.fu.rows[-duplicates,]
    }
    
tbl.fu.rows
ftbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to,decreasing = TRUE)),]
    
tbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to,decreasing = TRUE)),]
    
tbl.fu.rows
tbl.fu.rows <- tbl.fu.rows[with(tbl.fu.rows, order(new_tumor_event_dx_days_to)),]
tbl.fu.rows
tbl.fu.rows <- tbl.fu.rows[order(new_tumor_event_dx_days_to),]
tbl.fu.rows <- tbl.fu.rows[order(tbl.fu.rows$new_tumor_event_dx_days_to),]
tbl.fu.rows
class(tbl.fu.rows$new_tumor_event_dx_days_to)
tbl.fu.rows <- tbl.fu.rows[order(as.integer(tbl.fu.rows$new_tumor_event_dx_days_to)),]
tbl.fu.rows
create.Progression.record <- function(patient.id)
{
    
    diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]
    diagnosis.date <- as.Date(sprintf("%s-%s-%s", diagnosis.year, "01", "01"))
    tbl.fu.rows <- subset(tbl.f2, bcr_patient_barcode==patient.id)
    tbl.nte.rows <- subset(tbl.nte, bcr_patient_barcode==patient.id)
    
    if(nrow(tbl.fu.rows) == 0 & nrow(tbl.nte.rows)==0 )
    return(list())
    
    tbl.fu.rows <- tbl.fu.rows[, c("new_neoplasm_event_type","new_tumor_event_dx_days_to")  ]
    if(nrow(tbl.nte.rows)>0) {
        nte <- tbl.nte.rows[,c("new_neoplasm_event_type","new_tumor_event_dx_days_to")]
        tbl.fu.rows <- rbind(tbl.fu.rows, nte)
    }
    
    duplicates <- which(duplicated(tbl.fu.rows[,"new_tumor_event_dx_days_to"]))
    if(length(duplicates)>0){
        dupVals <- unique(tbl.fu.rows[duplicates, "new_tumor_event_dx_days_to"])
        originals <- match(dupVals, tbl.fu.rows$new_tumor_event_dx_days_to)
        allVals <- sapply(dupVals, function(val) {
            t<- paste(tbl.fu.rows[which(tbl.fu.rows$new_tumor_event_dx_days_to == val), "new_neoplasm_event_type"], collapse=";")
            t<- gsub("\\[Unknown\\]", "", t)
            t<- gsub("\\[Not Available\\]", "", t)
            t<- gsub("NA", "", t)
            while(grepl(";;", t)){ t<- gsub(";;", ";", t)}
            gsub(";$", "", t)
        })
        tbl.fu.rows[originals, "new_neoplasm_event_type"] <- allVals
        tbl.fu.rows <- tbl.fu.rows[-duplicates,]
    }
    
    name <- "Progression"
    result <- vector("list", nrow(tbl.fu.rows) )
    good.records.found <- 0
    tbl.fu.rows <- tbl.fu.rows[order(as.integer(tbl.fu.rows$new_tumor_event_dx_days_to)),]
    
    if(nrow(tbl.fu.rows)>0){
        for(i in 1:nrow(tbl.fu.rows)){
            row <- tbl.fu.rows[i, ]
            eventtype <- row[["new_neoplasm_event_type"]]
            if(!is.na(eventtype) ){ if(eventtype == "[Unknown]" | eventtype == "[Not Available]" | eventtype == "") eventtype = NA }
            
            if(row["new_tumor_event_dx_days_to"] != "[Not Available]"){
                progression.offset <-   as.integer(row["new_tumor_event_dx_days_to"])
                patient.id <- gsub("-", ".", patient.id, fixed=TRUE)
                patient.number <- as.integer(id.map[patient.id])
                progression <- reformatDate(format(diagnosis.date + progression.offset))
                
                new.event <- list(PatientID=patient.id,
                PtNum=patient.number,
                study=study,
                Name=name,
                Fields=list(date=progression, event=eventtype, number=good.records.found+1))
                
                good.records.found <- good.records.found + 1
                result[[good.records.found]] <- new.event
            }
        }
    }
    
    
    result[1:good.records.found]
    
} # create.Progression.record
#-------------------
print("--- test_create.Progression.record")
    x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
x
runTests()
 x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.2689", PtNum=2, study=study, Name="Progression", Fields=list(date="04/07/2010", event=NA, number=1)))
    
    
    x <- create.Progression.record("TCGA-AF-A56K")  #in nte table
    checkEquals(length(x), 1)
    checkEquals(x[[1]], list(PatientID="TCGA.AF.A56K", PtNum=16, study=study, Name="Progression", Fields=list(date="05/02/2009", event="Locoregional Disease", number=1)))
    
    x <- create.Progression.record("TCGA-AF-3911")  #2 progression events
    checkEquals(length(x), 2)
    checkEquals(x[[2]], list(PatientID="TCGA.AF.3911", PtNum=8, study=study, Name="Progression", Fields=list(date="10/18/2011", event=NA, number=2)))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.3911", PtNum=8, study=study, Name="Progression", Fields=list(date="11/27/2010", event=NA, number=1)))
 x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.2689", PtNum=2, study=study, Name="Progression", Fields=list(date="04/07/2010", event=NA, number=1)))
x
x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.2689", PtNum=2, study=study, Name="Progression", Fields=list(date="10/29/2009", event=NA, number=1)))
  x <- create.Progression.record("TCGA-AF-A56K")  #in nte table
    checkEquals(length(x), 1)
 checkEquals(x[[1]], list(PatientID="TCGA.AF.A56K", PtNum=16, study=study, Name="Progression", Fields=list(date="05/02/2009", event="Locoregional Disease", number=1)))
   
 x <- create.Progression.record("TCGA-AF-3911")  #2 progression events
    checkEquals(length(x), 2)
    checkEquals(x[[2]], list(PatientID="TCGA.AF.3911", PtNum=8, study=study, Name="Progression", Fields=list(date="10/18/2011", event=NA, number=2)))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.3911", PtNum=8, study=study, Name="Progression", Fields=list(date="11/27/2010", event=NA, number=1)))
test_create.Progression.record <- function()
{
    print("--- test_create.Progression.record")
    x <- create.Progression.record("TCGA-AF-2689")
    checkTrue(is.list(x))
    checkEquals(names(x[[1]]), c("PatientID", "PtNum", "study", "Name", "Fields"))
    checkEquals(names(x[[1]][["Fields"]]), c("date", "event", "number"))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.2689", PtNum=2, study=study, Name="Progression", Fields=list(date="10/29/2009", event=NA, number=1)))
    
    
    x <- create.Progression.record("TCGA-AF-A56K")  #in nte table
    checkEquals(length(x), 1)
    checkEquals(x[[1]], list(PatientID="TCGA.AF.A56K", PtNum=16, study=study, Name="Progression", Fields=list(date="05/02/2009", event="Locoregional Disease", number=1)))
   
   
    x <- create.Progression.record("TCGA-AF-3911")  #2 progression events
    checkEquals(length(x), 2)
    checkEquals(x[[2]], list(PatientID="TCGA.AF.3911", PtNum=8, study=study, Name="Progression", Fields=list(date="10/18/2011", event=NA, number=2)))
    checkEquals(x[[1]], list(PatientID="TCGA.AF.3911", PtNum=8, study=study, Name="Progression", Fields=list(date="11/27/2010", event=NA, number=1)))
   
} # test_create.Progression.record
#-----------------------------------------------------------------------
test_create.Progression.record()
   test_create.DOB.record()
   test_create.Chemo.record()
   test_create.Diagnosis.record()
   test_create.status.record()
   test_create.Progression.record()
   test_create.Radiation.record()
   test_create.Procedure.record()
   test_create.Encounter.record()
   test_create.Pathology.record()
   test_create.Absent.record()
   test_create.Tests.record()
   test_create.Background.record()
dob.events <- lapply(patient.ids, function(id) create.DOB.record(id))
    diagnosis.events <- create.all.Diagnosis.records(patient.ids)
    chemo.events <- create.all.Chemo.records(patient.ids)
    radiation.events <- create.all.Radiation.records(patient.ids)
    
    encounter.events <- create.all.Encounter.records(patient.ids)
    pathology.events <- create.all.Pathology.records(patient.ids)
    progression.events <- create.all.Progression.records(patient.ids)
    status.events <- lapply(patient.ids, create.status.record)
    background.events <- lapply(patient.ids, create.Background.record)
    tests.events <- create.all.Tests.records(patient.ids)
    procedure.events <- create.all.Procedure.records(patient.ids)
    absent.events <- create.all.Absent.records (patient.ids)
    # coad surgery at time of Dx & not reported, but other post/pre surgeries in other tables
    
    events <- append(dob.events, chemo.events)
    events <- append(events, diagnosis.events)
    events <- append(events, status.events)
    events <- append(events, progression.events)
    events <- append(e    ev radiation.events)
    events <- append(events, procedure.ev    ev    events <- append(events, encounter.events)
    events <- append(events, pathology.events)
    events <- append(events, absent.events)
    events <- append(events, tests.events)
    events <- append(events,background.events)
    
    #    printf("found %d events for %d patients", length(events), length(patient.ids))
    print(table(unlist(lapply(events, function(e) e["Name"]))))
         events
    
 patients <- tcga.ids
   
   patients <- gsub("\\.", "\\-", patients)
   checkTrue(all(patients %in% tbl.pt[,2]))
   
   history <- parseEvents(patients)
length(history)
checkEquals(length(history), 1608)
   checkEquals(as.list(table(unlist(lapply(history, function(e) e["Name"])))), list(`Absent`=17,`Background`=171, `Birth`=171, `Diagnosis`=171,`Drug`=158,`Encounter`=171, `Pathology`=187, `Procedure`=20, `Progression`=30,  `Radiation`=25, `Status`=171, `Tests`=316))
      #omf: other malignancy form for 2 patients gives extra pathologies
      # many additional surgeries marked (new_tumor_event_additional_surgery_procedure = YES) but no date given
      
   serialized.file.name <- "../../extdata/history.RData"
   #printf("saving history to %s", serialized.file.name)
   
   save(history, file=serialized.file.name)
q()
