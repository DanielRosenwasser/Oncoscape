length(grep("TCGA", nodes(rcy@graph)))
getSelectedNodes(rcy)
viz()
viz(rcy)
reload()
make
make()
getSelectedNodes(rcy)
getSelectedNodes(rcy)
getSelectedNodes(rcy)
clearSelection(rcy)
getSelectedNodes(rcy)
head(pos)
getPosition(rcy, getSelectedNodes(rcy)$id)
dim(getSelectedNodes(rcy))
length(getSelectedNodes(rcy))
length(getSelectedNodes(rcy))
class(pos)
head(pos)
head(pos)
head(pos)
head(pos)
rownames(pos) <- NULL
head(pos)
x <- pos$x
range(x)
x <- x - min(x)
range(x)
x <- x * (3000) * (1/max(x))
range(x)
range(pos$x)
range(x)
range(x)
range(y)
range(y)
range(y)
range(y)
head(pos.new)
setPosition(rcy, head(pos.new))
setPosition(rcy, pos.new)
setPosition(rcy, pos.new)
setPosition(rcy, pos.new)
getSelectedNodes(rcy)
fitContent(rcy)
rcy
q()
source("go.R")
make
make()
rcy
getSelectedNodes(rcy)
getSelectedNodes(rcy)
hobo.layout(rcy)
reload()
hobo.layout(rcy)
fitContent(rcy)
saveLayout(rcy, "hobo1.layout")
fitContent(rcy)
print(load("goi545.RData"))
head(goi)
length(goi)
dir()
mget(head(goi), org.Hs.egCHR)
mget(head(goi), org.Hs.egSYMBOL2EG)
mget(head(geneIDs), org.Hs.egCHR)
mget(head(geneIDs), org.Hs.egCHRLOC)
loc
mget(geneID, org.Hs.egMAP)
arm
strsplit(arm, split="[qp]")
gregexpr("([0-9]+[pq])", arm)
starts <- as.integer(gregexpr("([0-9]+[pq])", arm))
starts
match.results[1]
attr(match.results[[1]])
attr(match.results[[1]], "match.length")
lapply (match.results, function (x) attr(x, "match.length"))
lapply(match.results, function (x) attr(x, "match.length"))
as.integer(lapply(match.results, function (x) attr(x, "match.length")))
lapply(1:length(match.results), function(i) substring(arm[i], match.starts[i], match.lengths[i]))
unlist(lapply(1:length(match.results), function(i) substring(arm[i], match.starts[i], match.lengths[i])), use.names=FALSE)
chrom
loc
arm.list
geneID
lengh(loc)
loc
loc.list
loc.list
tbl.chrloc
order(tbl.chrloc$arm)
tbl.chrloc$arm[order(tbl.chrloc$arm)]
tbl.chrloc$arm[order(tbl.chrloc$arm, tbl.chrloc$loc)]
[order(tbl.chrloc$arm, tbl.chrloc$loc)
order(tbl.chrloc$arm, tbl.chrloc$loc)
tbl.chrloc[order(tbl.chrloc$arm, tbl.chrloc$loc),]
reload(); chrom.stacked.gene.layout()
reload(); chrom.stacked.gene.layout()
reload(); x <- chrom.stacked.gene.layout()
mget("C2ORF44", org.Hs.egALIAS2EG)
reload(); x <- chrom.stacked.gene.layout()
length(is.na(geneID.list))
length(which(is.na(geneID.list)))
geneID.list[(which(is.na(geneID.list)))]
which(is.na(geneID.list))
as.integer(which(is.na(geneID.list)))
Q
source("go.R")
reload(); x <- chrom.stacked.gene.layout()
Q
reload(); x <- chrom.stacked.gene.layout()
Q
reload(); x <- chrom.stacked.gene.layout()
c
tbl.chrloc
deleters
length(geneID)
length(syms)
length(arm)
length(loc)
length(arm.list)
length(arm.fullInfo)
length(arm.list)
lapply(arg.list, length)
lapply(arm.list, length)
length(arm.list)
length(arm.fullInfo)
head(arm.list)
arm.list2 <- lapply(arm.list, "[", 1)
head(arm.list2)
length(unlist(arm.list2, use.names=FALSE))
arm.list["64109"]
length(arm)
length(loc)
length(geneID)
dim(data.frame(arm=arm, loc=loc, geneID=geneID, stringsAsFactors=FALSE))
head(geneID.list)
head(tbl.chrloc)
tail(tbl.chrloc)
tbl.chrloc
tail(tbl.chrloc)
head(arm, n=20)
head(arm.list, n=20)
head(arm.list, n=8)
head(arm, n=8)
head(arm.list2, n=7)
head(arm.fullInfo, n=8)
head(match.starts, n=8)
head(match.lengths, n=8)
head(arm, n=9)
head(arm, n=10)
head(tbl.chr.oc, n=10)
head(tbl.chrloc, n=10)
tail(tbl.chrloc, n=10)
tail arm
tail(arm)
tail(arm.fullInfo)
tail(tbl.chrloc)
geneID.list["DUX4"]
as.character(geneID.list["DUX4"])
arm.fullInfo[as.character(geneID.list["DUX4"])]
arm.fullInfo[as.character(geneID.list[POTEB"])]
)
arm.fullInfo[as.character(geneID.list["POTEB"])]

                       function(i) substring(arm.fullInfo[i], match.starts[i], match.lengths[i])), use.names=FALSE)
sessionInfo()
tbl.chrloc
reload()
reload()
c
x
reload()
tbl.x
mget("85316", org.Hs.egMAP)
tbl.x$geneID
mget(tbl.x$geneID, org.Hs.egMAP)
mget(tbl.x$geneID, org.Hs.egCHR)
reload()
tbl.x
  library("TxDb.Hsapiens.UCSC.hg19.knownGene")
  txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene

reload()
tbl.x
reload()
reload()
reload()
test.chrom.stacked.gene.layout()
tbl.x
c
reload9)
reload()
tbl.chrloc
Q
source("go.R")
test.chrom.stacked.gene.layout()
deleters
Q
reload()
test.chrom.stacked.gene.layout()
reload()
test.chrom.stacked.gene.layout()
deleters
which(is.na(tbl.chrloc$arm))
no.arm; no.loc
Q
reload()
test.chrom.stacked.gene.layout()
n
n
no.arm
no.loc
n
deleter.indices
deleters.syms
deleter.syms
n
n
n
reload()
test.chrom.stacked.gene.layout()
n
n
n
deleter.indices
deleter.syms
which(is.na(geneID.list))
length(which(is.na(geneID.list)))
Q
reload()
test.chrom.stacked.gene.layout()
deleter.syms
Q
reload()
test.chrom.stacked.gene.layout()
deleter.syms
deleter.syms <- c()
deleter.syms
c
n
n
n
rownames(tbl.chrloc)[deleter.indices]
n
n
n
n
n
x
Q
reload(); test.chrom.stacked.gene.layout()
c
c
reload(); test.chrom.stacked.gene.layout()
c
c
x
x$failures
   checkEquals(x$failures, c("DUX4", "POTEB"))
c
reload(); test.chrom.stacked.gene.layout()
c
c
c
source("go.R")
reload(); test.chrom.stacked.gene.layout()
c
c
c
c
reload(); test.chrom.stacked.gene.layout()
c
reload(); test.chrom.stacked.gene.layout()
c
length(chrom)
length(arm)
length(geneID)
c
c
c
length(chrom)
deleter.syms
length(geneID.list)
length(goi)
length(syms)
length(geneID.list)
Q
reload(); test.chrom.stacked.gene.layout()
length(geneID.list)
c
c
c
length(geneID.list)
length(deleters)
deleters
length(deleters)
n
deleters
deleters
Q
reload(); test.chrom.stacked.gene.layout()
deleter.list
c
c
c
deleter.list
deleter.indices
n
n
deleter.list
deleter.syms
Q
reload(); test.chrom.stacked.gene.layout()
c
c
c
n
n
n
n
length(geneID.list)
deleter.syms
n
n
n
n
n
n
n
n
n
n
n
n
n
head(arm)
head(loc)
head(chrom)
length(arm); length(loc); length(chrom)
length(geneID)
length(chrom.list)
length(unlist(chrom.list,use.names=FALSE))
length(unlist(chrom.list2,use.names=FALSE))
length(chrom)
Q
reload(); test.chrom.stacked.gene.layout()
c
c
c
c
c
c
reload(); test.chrom.stacked.gene.layout()
dim(x$tbl)
x$failures
c
reload(); test.chrom.stacked.gene.layout()
c
source("go.R")
reload(); test.chrom.stacked.gene.layout()
   x <- chrom.stacked.gene.layout()

head (x$tbl)
x$tbl
table(x$tbl$chrom)
reload(); test.chrom.stacked.gene.layout()
maxNodes=NA
dim(tbl.chrom)
reload(); test.createArmLocChromosomeTable()
reload()
x
dim(x$tbl)
reload()
reload(); test.createArmLocChromosomeTable()
reload(); test.createArmLocChromosomeTable()
reload(); run()
colnames(tbl)
Q
reload(); run()
dim(tbl)
colnmaes(tbl)
colnames(tbl)
hed(tbl)
head(tbl)
Q
reload(); run()
head(tbl)
unique(tbl$arm)
length(all.nodes)
g
Q
reload(); run()
viz(rcy)
viz()
make
reload(); make()
reload(); make()
reload(); make()
reload(); make()
g.chrom
grep("chr", nodes(g.chrom), v=T)
n
n
noa(g.chrom, "label")
n
selectNodes(rcy, "chr7q")
c
fitSelected(rcy)
fitSelectedContent(rcy)
chromosome.nodes
reload()
dir()
reload()
reload()
q()
reload()
reload()
reload()
grep("chr", nodes(x$g))
grep("chr", nodes(x$g), v=TRUE)
grep("chr", nodes(g.chrom), v=TRUE)
grep("layout", dir(), v=T)
showAllEdges(rcy)
hideEdges(rcy)
hideAllEdges(rcy)
g.chrom
grep("chr", nodes(g.chrom), v=T)
sort(grep("chr", nodes(g.chrom), v=T))
selectNodes(rcy, c("chr1p", "chr1q"))
length(sort(grep("chr", nodes(g.chrom), v=T)))
getSelectedNodes(rcy)$id
getPosition(getSelectedNodes(rcy)$id)
getPosition(rcy, getSelectedNodes(rcy)$id)
setPosition(rcy, data.frame(id="chr1p", x=-3100, y=-260))
fitContent(rcy)
lapply(1:12, function(i) -3100 + (300 * i))
as.integer(lapply(1:12, function(i) -3100 + (300 * i)))
x.locs
x <- tbl.armLocChrom
head(x)
table(x$arm)
subset(x, arm=="chrNA")
reload()
x <- tbl.armLocChrom
subset(x, arm=="chrNA")
dir()
saveLayout(rcy, "hobo2.layout")
head(x)
subset(x, arm=="chr1p")
getPosition(rcy, "chr1p")
base.x
pos
pos$x
fitCotent(rcy)
fitContent(rcy)
i = 1
df <- data.frame(id=genes[i], x=base.x, y=base.y + (i * 60), stringsAsFactors=FALSE)
df
genes[i]
genes
i = 1
df
genes.p
reload()
layout.genes.by.chromosome.arm()
reload(); layout.genes.by.chromosome.arm()
fitContent(rcy)
reload(); layout.chromosome.arms()
bottom.y0
bottom.y0
x.locs[22]
reload()
layout.genes.by.chromosome.arm()
fitContent(rcy)
fitContent(rcy)
getSelectedNodes(rcy)
getSelectedNodes(rcy)
make
make()
c
layout.genes.by.chromosome.arm()
layout.chromosome.arms()
layout.genes.by.chromosome.arm()
fitContent(rcy)
head(tbl.armLocChrom)
tbl.armLocChrom['ATRX', ]
x <- tbl.armLocChrom
table(x$chrom)
wdth(120)
table(x$chrom)
table(x$arm)
chroms
reload()
layout.genes.by.chromosome.arm()
fitContent(rcy)
export
export()
export(rcy)
q()
