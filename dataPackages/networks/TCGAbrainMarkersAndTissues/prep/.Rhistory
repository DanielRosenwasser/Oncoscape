head(arm, n=9)
head(arm, n=10)
head(tbl.chr.oc, n=10)
head(tbl.chrloc, n=10)
tail(tbl.chrloc, n=10)
tail arm
tail(arm)
tail(arm.fullInfo)
tail(tbl.chrloc)
geneID.list["DUX4"]
as.character(geneID.list["DUX4"])
arm.fullInfo[as.character(geneID.list["DUX4"])]
arm.fullInfo[as.character(geneID.list[POTEB"])]
)
arm.fullInfo[as.character(geneID.list["POTEB"])]

                       function(i) substring(arm.fullInfo[i], match.starts[i], match.lengths[i])), use.names=FALSE)
sessionInfo()
tbl.chrloc
reload()
reload()
c
x
reload()
tbl.x
mget("85316", org.Hs.egMAP)
tbl.x$geneID
mget(tbl.x$geneID, org.Hs.egMAP)
mget(tbl.x$geneID, org.Hs.egCHR)
reload()
tbl.x
  library("TxDb.Hsapiens.UCSC.hg19.knownGene")
  txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene

reload()
tbl.x
reload()
reload()
reload()
test.chrom.stacked.gene.layout()
tbl.x
c
reload9)
reload()
tbl.chrloc
Q
source("go.R")
test.chrom.stacked.gene.layout()
deleters
Q
reload()
test.chrom.stacked.gene.layout()
reload()
test.chrom.stacked.gene.layout()
deleters
which(is.na(tbl.chrloc$arm))
no.arm; no.loc
Q
reload()
test.chrom.stacked.gene.layout()
n
n
no.arm
no.loc
n
deleter.indices
deleters.syms
deleter.syms
n
n
n
reload()
test.chrom.stacked.gene.layout()
n
n
n
deleter.indices
deleter.syms
which(is.na(geneID.list))
length(which(is.na(geneID.list)))
Q
reload()
test.chrom.stacked.gene.layout()
deleter.syms
Q
reload()
test.chrom.stacked.gene.layout()
deleter.syms
deleter.syms <- c()
deleter.syms
c
n
n
n
rownames(tbl.chrloc)[deleter.indices]
n
n
n
n
n
x
Q
reload(); test.chrom.stacked.gene.layout()
c
c
reload(); test.chrom.stacked.gene.layout()
c
c
x
x$failures
   checkEquals(x$failures, c("DUX4", "POTEB"))
c
reload(); test.chrom.stacked.gene.layout()
c
c
c
source("go.R")
reload(); test.chrom.stacked.gene.layout()
c
c
c
c
reload(); test.chrom.stacked.gene.layout()
c
reload(); test.chrom.stacked.gene.layout()
c
length(chrom)
length(arm)
length(geneID)
c
c
c
length(chrom)
deleter.syms
length(geneID.list)
length(goi)
length(syms)
length(geneID.list)
Q
reload(); test.chrom.stacked.gene.layout()
length(geneID.list)
c
c
c
length(geneID.list)
length(deleters)
deleters
length(deleters)
n
deleters
deleters
Q
reload(); test.chrom.stacked.gene.layout()
deleter.list
c
c
c
deleter.list
deleter.indices
n
n
deleter.list
deleter.syms
Q
reload(); test.chrom.stacked.gene.layout()
c
c
c
n
n
n
n
length(geneID.list)
deleter.syms
n
n
n
n
n
n
n
n
n
n
n
n
n
head(arm)
head(loc)
head(chrom)
length(arm); length(loc); length(chrom)
length(geneID)
length(chrom.list)
length(unlist(chrom.list,use.names=FALSE))
length(unlist(chrom.list2,use.names=FALSE))
length(chrom)
Q
reload(); test.chrom.stacked.gene.layout()
c
c
c
c
c
c
reload(); test.chrom.stacked.gene.layout()
dim(x$tbl)
x$failures
c
reload(); test.chrom.stacked.gene.layout()
c
source("go.R")
reload(); test.chrom.stacked.gene.layout()
   x <- chrom.stacked.gene.layout()

head (x$tbl)
x$tbl
table(x$tbl$chrom)
reload(); test.chrom.stacked.gene.layout()
maxNodes=NA
dim(tbl.chrom)
reload(); test.createArmLocChromosomeTable()
reload()
x
dim(x$tbl)
reload()
reload(); test.createArmLocChromosomeTable()
reload(); test.createArmLocChromosomeTable()
reload(); run()
colnames(tbl)
Q
reload(); run()
dim(tbl)
colnmaes(tbl)
colnames(tbl)
hed(tbl)
head(tbl)
Q
reload(); run()
head(tbl)
unique(tbl$arm)
length(all.nodes)
g
Q
reload(); run()
viz(rcy)
viz()
make
reload(); make()
reload(); make()
reload(); make()
reload(); make()
g.chrom
grep("chr", nodes(g.chrom), v=T)
n
n
noa(g.chrom, "label")
n
selectNodes(rcy, "chr7q")
c
fitSelected(rcy)
fitSelectedContent(rcy)
chromosome.nodes
reload()
dir()
reload()
reload()
q()
reload()
reload()
reload()
grep("chr", nodes(x$g))
grep("chr", nodes(x$g), v=TRUE)
grep("chr", nodes(g.chrom), v=TRUE)
grep("layout", dir(), v=T)
showAllEdges(rcy)
hideEdges(rcy)
hideAllEdges(rcy)
g.chrom
grep("chr", nodes(g.chrom), v=T)
sort(grep("chr", nodes(g.chrom), v=T))
selectNodes(rcy, c("chr1p", "chr1q"))
length(sort(grep("chr", nodes(g.chrom), v=T)))
getSelectedNodes(rcy)$id
getPosition(getSelectedNodes(rcy)$id)
getPosition(rcy, getSelectedNodes(rcy)$id)
setPosition(rcy, data.frame(id="chr1p", x=-3100, y=-260))
fitContent(rcy)
lapply(1:12, function(i) -3100 + (300 * i))
as.integer(lapply(1:12, function(i) -3100 + (300 * i)))
x.locs
x <- tbl.armLocChrom
head(x)
table(x$arm)
subset(x, arm=="chrNA")
reload()
x <- tbl.armLocChrom
subset(x, arm=="chrNA")
dir()
saveLayout(rcy, "hobo2.layout")
head(x)
subset(x, arm=="chr1p")
getPosition(rcy, "chr1p")
base.x
pos
pos$x
fitCotent(rcy)
fitContent(rcy)
i = 1
df <- data.frame(id=genes[i], x=base.x, y=base.y + (i * 60), stringsAsFactors=FALSE)
df
genes[i]
genes
i = 1
df
genes.p
reload()
layout.genes.by.chromosome.arm()
reload(); layout.genes.by.chromosome.arm()
fitContent(rcy)
reload(); layout.chromosome.arms()
bottom.y0
bottom.y0
x.locs[22]
reload()
layout.genes.by.chromosome.arm()
fitContent(rcy)
fitContent(rcy)
getSelectedNodes(rcy)
getSelectedNodes(rcy)
make
make()
c
layout.genes.by.chromosome.arm()
layout.chromosome.arms()
layout.genes.by.chromosome.arm()
fitContent(rcy)
head(tbl.armLocChrom)
tbl.armLocChrom['ATRX', ]
x <- tbl.armLocChrom
table(x$chrom)
wdth(120)
table(x$chrom)
table(x$arm)
chroms
reload()
layout.genes.by.chromosome.arm()
fitContent(rcy)
export
export()
export(rcy)
q()
print(load("MDS.joint.SNA.CNA.allGenes.RData"))
head(coords.SNA.CNA)
q()
reload(); make()
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
reload(); make()
biocLite("GWASTools")
reload(); make()
biocLite("RCyjs")
reload(); make()
q()
reload(); make()
c
vAlign(rcy)
fit(rcy)
export(rcy)
dir()
httpSetStyle
httpSetStyle(rcy, "style.js")
sessionInfo()
q()
reload(); make()
q()
reload(); make()
q()
reload(); make()
q()
reload(); make()
q()
source("go.R")
source("go.R"); make()
q()
source("go.R"); make()
q()
source("go.R"); make()
fit(rcy)
dim(mtx.mut.lgg)
dim(mtx.cn.lgg)
mtx.cn.lgg[1:5, 1:5]
grep("E1.A7", rownames(mtx.cn.lgg), v=T)
grep("E1.A7Y", rownames(mtx.cn.lgg), v=T)
grep("E1.A7YU", rownames(mtx.cn.lgg), v=T)
length(sort(unique(c(rownames(mtx.cn.lgg), rownames(mtx.mut.lgg)))))
lgg.mut.cn.tumors <- sort(unique(c(rownames(mtx.cn.lgg), rownames(mtx.mut.lgg)))))
lgg.mut.cn.tumors <- sort(unique(c(rownames(mtx.cn.lgg), rownames(mtx.mut.lgg))))
length(lgg.mut.cn.tumors)
save(lgg.mut.cn.tumors, file="~/oncogit/Oncoscape/dataPackages/networks/TCGAbrainMarkersAndTissues/prep/lgg.mut.cn.tumors.RData")
rcy
fit(rcy)
selectNodes(rcy, lgg.mut.cn.tumors)
print(load("~/oncodev/hbolouri/dataPackages/RawData/TCGAlgg/Clinical_2-10-15/lgg.graded.tumors.RData"))
print(load("~/oncodev/hbolouri/dataPackages/RawData/TCGAlgg/Clinical_2-10-15/lgg.graded.tumors.RData"))
selectNodes(rcy, lgg.graded.tumors)
selectNodes(rcy, lgg.mut.cn.tumors)
gbm.mut.cn.tumors <- sort(unique(c(rownames(mtx.cn.gbm), rownames(mtx.mut.gbm))))
selectNodes(rcy, gbm.mut.cn.tumors)
clearSelection(rcy)
selectNodes(rcy, gbm.mut.cn.tumors)
length(gbm.mut.cn.tumors)
selectNodes(rcy, gbm.mut.cn.tumors)
selectNodes(rcy, gbm.mut.cn.tumors)
 sort(unique(c(rownames(mtx.cn.gbm), rownames(mtx.mut.gbm))))
wdth(100)
 sort(unique(c(rownames(mtx.cn.gbm), rownames(mtx.mut.gbm))))
gbm.mut.cn.tumors
lgg.mut.cn.tumors
print(load("~/oncodev/hbolouri/dataPackages/RawData/TCGAlgg/Clinical_2-10-15/tbl.grade.RData"))
clearSelection()
clearSelection(rcy)
selectNodes(rcy, rownames(tbl.grade))
selectNodes(rcy, rownames(tbl.grade))
selectNodes(rcy, rownames(tbl.grade))
len(getSelectedNodes(rcy))
length(getSelectedNodes(rcy))
dim(getSelectedNodes(rcy))
length(rownames(tbl.grade))
selectNodes(rcy, rownames(tbl.grade))
dim(getSelectedNodes(rcy))
dim(getSelectedNodes(rcy))
dim(getSelectedNodes(rcy))
head(getSelectedNodes(rcy))
tumors <- getSelectedNodes(rcy)$id
head(tumors)
head(tbl.grade)
dim(tbl.grade)
length(intersect(tumors, rownames(tbl.grade)))
731-659
length(setdiff(tumors, rownames(tbl.grade)))
setdiff(tumors, rownames(tbl.grade))
clearSelection(rcy)
selectNodes(rcy, setdiff(tumors, rownames(tbl.grade)))
lgg.tumors.unassigned <- setdiff(tumors, rownames(tbl.grade))
save(lgg.tumors.unassigned, file="~/oncogit/Oncoscape/dataPackages/networks/TCGAbrainMarkersAndTissues/prep/lgg.tumors.unassigned.RData")
q()
reload(); make()
selectNodes(rcy, c("C2ORF44", "DAXX", "DUX4", "POTEB", "STL"))
vAlign(rcy)
hAlign(rcy)
hAlign(rcy)
dir()
fit(rcy)
vAlign(rcy)
fit(rcy); export(rcy)
export
viz(rcy)
export(rcy)
reload()
rcy <<- run()
reload(); run()
make
  viz(rcy)
  hobo.tumor.layout()
  fitContent(rcy)
  tbl.pos <- tbl.all[, c("name", "screen.x", "screen.y")]
  colnames(tbl.pos) <- c("id", "x", "y")
  setPosition(rcy, tbl.pos)
  viz(rcy)
  setEdgeStyle(rcy, "bezier")
  showEdges(rcy, "chromosome")

viz
httpSetStyle(rcy, "style.js")
q()
reload()
make()
getSelectedNodes(rcy)
getPosition(rcy, "end.2")
getSelectedNodes(rcy)
getPosition(rcy, "start.1")
reload(); make()
vAlign(rcy)
fit(rcy)
getSelectedNodes(rcy)
getSelectedNodes(rcy)
fit(rcy)
getSelectedNodes(rcy)$id
getPosition(rcy, getSelectedNodes(rcy)$id)
tbl.pos.orphanGenes <- getPosition(rcy, getSelectedNodes(rcy)$id)
setPosition(rcy, tbl.pos.orphanGenes)
save(tbl.pos.orphanGenes, file="tbl.pos.orphanGenes.RData")
q()
reload(); make()
reload(); make()
export
reload(); export(rcy)
q()
reload(); make()
3
reload(); make()
