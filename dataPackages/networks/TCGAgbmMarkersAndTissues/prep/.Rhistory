reload()
text <- scan("nodes.json")
text <- scan("nodes.json", what=character(0))
nchar(text)
lenth(text)
length(text)
text <- scan("nodes.json", what=character(0), sep=NULL)
text <- scan("nodes.json", what=character(0), sep="")
text <- scan("nodes.json", what=character(0), sep="\n")
text[1:2]
fromJSON(text)
all.nodes <- fromJSON(scan("nodes.json", what=character(0), sep="\n"))
all.nodes <- fromJSON(scan("nodes.json", what=character(0), sep="\n",quiet=TRUE))
all.nodes <- fromJSON(scan("nodes.json", what=character(0), sep="\n",quiet=TRUE))
length(all.nodes)
head(all.nodes)
print(load("../../../TCGAgbm/inst/extdata/mtx.mut.RData"))
reload()
dim(mtx.mut)
dim(mtx.cn)
dim(mtx.mut)
mtx.mut[1:10,1:10]
length(intersection(rownames(mtx.mut), patients))
length(intersect(rownames(mtx.mut), patients))
rm(mtx.mut)
reload()
reload()
mtx.mut[1:10,1:10]
rm(mtx.mut)
reload()
reload()
mtx.mut[1:10,1:10]
rm(mtx.cn)
reload()
dim(mtx.fmut)
length(genes); length(patients)
head(tbl)
dim(fmtx.cn)
g.cn
g.cn
q9)
q()
reload("redo"
)
)
reload("redo")
reload("copyNumberGraph")
reload("copyNumberGraph")
reload("copyNumberGraph")
reload("viz")
reload("redo")
q()
reload("redo")
q()
all.nodes <- fromJSON(scan("nodes.json", what=character(0), sep="\n",quiet=TRUE))
reload("redo")
showAllEdges(rcy)
hideAllEdges(rcy)
reload("viz")
httpSetStyle("style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style-x.json")
httpSetStyle(rcy, "style-x.json")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
showEdges
showMethods("showEdges")
selectedMethod("showEdges", "RCyjsClass")
selectMethod("showEdges", "RCyjsClass")
showEdges(rcy, "chromosome")
showAllEdges(rcy)
hideAllEdges(rcy)
tbl.gbmDzSubTypes[patients, "gbmDzSubType"];
as.character(tbl.gbmDzSubTypes[patients, "gbmDzSubType"];)
as.character(tbl.gbmDzSubTypes[patients, "gbmDzSubType"])
reload("redo")
reload("viz")
httpSetStyle(rcy, "style.js")
setBackgroundColor
setBackgroundColor(rcy, "#DDDDDD")
setBackgroundColor(rcy, "#F0F0F0")
setBackgroundColor(rcy, "#F8F8F8")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
saveLayout(rcy, "layout-from-oncodev1.2.28")
restoreLayout(rcy, "layout-from-oncodev1.2.28")
fitContent(rcy)
showAllEdges(rcy)
reload("redo")
reload(viz)
reload("viz")
showAllEdges(rcy)
reload(c(0, "chromosomeGraph", "viz"))
run("mutationGraph")
run("copyNumberGraph")
reload("copyNumberGraph")
reload("redo")
httpSetStyle(rcy, "style.js")
reload("export")
g.markers.json <- getJSON(rcy);
nchar(g.markers.json)
grep("degree", g.markers.json)
reload("redo")
reload("redo")
g.markers.json <- getJSON(rcy);
grep("degree", g.markers.json)
reload("export")
reload("redo")
reload("redo")
x <- getJSON(rcy)
length(x)
length(x[[1]])
nchar(x)
xx <- fromJSON(x)
length(xx)
names(xx)
xx$style
reload("export")
reload("export")
reload("redo")
reload("redo")
reload(0)
q()
reload("redo")
g.chrom
dim(fmtx.mut)
fmtx.cn
x
dim(fmtx.cn)
reload()
rows
gene.count
patient.count
dim(fmtx.mut)
dim(fmtx.cn)
indices
vec
dim(mtx)
c
dim(fmtx.cn)
dim(mtx)
gene.count; patient.count
c
dim(mtx)
rownames(mtx)
rows
indices
vec
which(filter.func(vec))
filter.func
Q
reload()
rows
cols
c
reload("viz")
reload("export")
reload("debug")
reload("debug")
reload("debug")
reload("debug")
reload("debug")
levels
"debug" %in% levels
n
n
debug.small
n
n
"redo" %in% levels
n
debug.small
Q
reload("debug")
n
n
n
n
debug.small
n
debug.small
n
n
n
c
c
Q
reload("debug")
n
n
n
n
n
n
n
n
n
n
n
n
\n
c
n
n
n
length(all.nodes)
length(genes)
length(patients)
length(all.nodes)
all.nodes <<- c(genes, patients, chromosomes)
length(all.nodes)
length(chromosomes)
length(genes)
length(patients)
Q
reload(0)
c
g
reload("debug")
reload("redo")
reload()
debug.small
reload()
reload("redo")
showAllEdges(rcy)
reload("viz")
reload()
reload()
reload()
maxNodes <- 10
length(all.nodes)
as.character(fmtx.mut)
fmtx.mut
dim(mtx.mut)
patients
intersect(rownames(mtx.mut), patients); intersect(colnames(mtx.mut), genes)
ndor(mtx.mut)
nrow(mtx.mut)
nrow(fmtx.mut)
product(dim(fmtx.mut))
showAllEdges(rcy)
q()
reload(); maxNodes=10
showAllEdges(rcy)
viz()
export()
source("go.R")
run(10)
viz()
rcy
httpSetStyle(rcy, "../../markersAndTissues-style.js")
q)\
q()
source("go.R")
source("go.R")
rcy <- run(10)
viz(rcy)
source("go.R")
rcy <- run(10)
viz(rcy)
g.markers.json <- getJSON(rcy);
nchar(g.markers.json)
g.markers.json
export(rcy)
nchar(g.markers.json)
gsub("},", "}, ", g.markers.json, fixed=TRUE)
g.markers.
g.markers.json
nchar(g.markers.json)
print(load("../../../TCGAgbm/inst/extdata/markers.json.RData"))
nchar(g.markers.json)
substring(g.markers.json, 22600, 22651)
substring(g.markers.json, 1, 100)
x <- fromJSON(g.markers.json)
names(x)
x.style
x$style
args(fromJSON)
x <- fromJSON(g.markers.json, simplifyVector=FALSE))
x <- fromJSON(g.markers.json, simplifyVector=FALSE)
x
export(rcy)
q()
source("go.R")
rcy <- run()
viz(rcy)
export(rcy)
viz(rcy)
viz(rcy)
export(rcy)
q()
q()
